#!/bin/bash

#############
### SETUP ###
#############

# import typography variables
source ~/.hex_files/.lib/typography
# import data functions
source ~/.hex_files/.lib/data_helper
# import terminal helper functions
source ~/.hex_files/.lib/terminal_helper
# import terminal io functions
source ~/.hex_files/.lib/terminal_io
# import type styles
source ~/.hex_files/.lib/type_style

############
### MAIN ###
############

main() {
  # if no arguments...
  if [ $# -eq 0 ]; then
    script_info
    echo "Type 'hex manual' for help"
    terminate
  fi
  # $1= hex command
  case $1 in
    ### General manual page for hex
    manual|man|help)
      print_manual
      ;;
    ### Function test: system information
    sysinfo|sys)
      sysinfo
      ;;
    ### Reference useful information
    reference|ref)
      # $2= reference operation
      reference $2
      ;;
    ### Keep a list of useful codes and information
    codes|code)
      # $2= code key
      # $3= param1
      # $4= param2
      codes $2 $3 $4
      ;;
    ### Install useful development utilities
    dev)
      # $2= dev option
      dev $2
      ;;
    ### Generate copies of directories in .hex_files
    generate|gen|g)
      # $2= generate operation
      # $3= target filepath to generate in
      generate $2 $3
      ;;
    ### Generate favicons
    favicon|icon)
      # $2= icon name
      # $3= target directory
      favicon $2 $3
      ;;
    *)
      terminate "Operation not found. Type 'hex manual' for help"
      ;;
  esac
}

######################
### MAIN FUNCTIONS ###
######################

script_info() {
  echo -e "${TC_ROY}HEX:${TF_N} Custom scripts by mcli830"
}

print_manual() {
  source ~/.hex_files/.ref/man/hex
}

sysinfo() {
  local title="System Information for ${TC_ROY}@$HOSTNAME${TC_D}"
  local now=$(date +"%x %r %Z")
  local time_stamp="Timestamp: ${TC_GLD}$now${TC_D} by ${TC_CYN}$USER${TC_D}"
  echo -e "$title"
  echo -e "$time_stamp"
}

reference() {
  # $1= reference file @ ~/.hex_files/.ref/...
  if [ -z "$1" ]; then
    terminate "${ERROR}No reference given"
  fi
  if [ -f ~/.hex_files/.ref/$1 ]; then
    source ~/.hex_files/.ref/$1
  else
    terminate "${ERROR}Invalid reference: $1"
  fi
}

codes() {
  # $1= operation
  init_directory ~/.hex_profile
  init_file ~/.hex_profile/codes
  read_map ~/.hex_profile/codes # Creates global $MAP
  if [ -z "$1" ]; then
    source ~/.hex_files/.ref/man/codes
  else
    case $1 in
      list|l)
        codes-list
        ;;
      add|a)
        # $2= key
        # $3= value
        codes-add $2 $3
        ;;
      delete|d)
        # $2= key
        codes-delete $2
        ;;
      clear|c)
        codes-clear
        ;;
      *)
        source ~/.hex_files/.ref/man/codes
        ;;
    esac
  fi

}

dev() {
  # $1= option
  if [ -z "$1" ]; then
    source ~/.hex_files/.ref/man/dev
  else
    case $1 in
      alias)
        dev-alias
        ;;
      webpack|webpack)
        dev-webpack
        ;;
      *)
        source ~/.hex_files/.ref/man/dev
        ;;
    esac
  fi
}

generate() {
  local operation="$1"
  local user_path="$2"
  if [ -z "$operation" ]; then
    source ~/.hex_files/.ref/man/generate
  else
    if [ ! -d ~/.hex_files/generate/$operation ]; then
      terminate "${ERROR}Invalid operation: $operation"
    fi
    if [ -z $user_path ]; then
      local abs_path="$PWD"
      local rel_path='.'
    else
      local abs_path="$PWD/$user_path"
      local rel_path="$user_path"
    fi
    local display_path="${FPATH}$(home_tilde $abs_path)${TF_N}"
    # abs_path= absolute path
    # rel_path= relative path from current working directory -- will be used to generate files
    # display_path= path to display when displaying info to user

    # confirmation
    confirm_strict "${WARN}Some files in $display_path may be overwritten. Continue?"

    cp -a ~/.hex_files/generate/$operation/. $rel_path/
    echo -e "${CREATE}${NAME}$operation${TF_N} files generated in $display_path"
  fi
}

favicon() {
  local icon="$1"
  local user_path="$2"
  if [ -z "$icon" ]; then
    source ~/.hex_files/.ref/man/favicon
  else
    if [ ! -f ~/.hex_files/favicon/${icon}.ico ]; then
      terminate "${ERROR}Invalid icon: $icon"
    fi
    if [ -z $user_path ]; then
      local abs_path="$PWD"
      local rel_path='.'
    else
      local abs_path="$PWD/$user_path"
      local rel_path="$user_path"
    fi
    local display_path="${FPATH}$(home_tilde $abs_path)${TF_N}"
    echo -e "${INFO}Generating favicon: ${TC_SAG}$icon${TF_N}"
    cp -a ~/.hex_files/favicon/${icon}.ico $rel_path/favicon.ico
    echo -e "${CREATE}${NAME}favicon.ico${TF_N} written to $display_path"
  fi
}

#####################
### SUB-FUNCTIONS ###
#####################

### codes
codes-list() {
  if [ ${#MAP[@]} -eq 0 ]; then
    echo -e "${INFO}No codes saved. Run ${CODE} hex codes add ${PARAM}<name> <value> ${TF_N} to save a code."
  else
    print_map
  fi
}

codes-add() {
  # $1= key
  # $2= value
  if [ -z "$1" ] || [ -z "$2" ]; then
    terminate "${HEX}${CC}codes${CC}add${TC_D} requires 2 arguments: ${PARAM}key${TC_D}, ${PARAM}value${TF_N}"
  else
    existing_map_key? $1
    if [ $? = 1 ]; then
      terminate "${ERROR}${NAME}$1${TC_D} key already exists."
    fi
    # write key:value to codes file
    file_write_map_line $1 $2 ~/.hex_profile/codes
    echo -e "${SAVE}Added ${NAME}$1${TF_N} to code list."
  fi
}

codes-delete() {
  # $1= key
  if [ -z "$1" ]; then
    terminate "${ERROR}No code key provided."
  fi
  existing_map_key? $1
  if [ $? = 0 ]; then
    terminate "${ERROR}${NAME}$1${TF_N} does not exist."
  fi
  # delete line with key in codes file
  file_delete_map_line $1 ~/.hex_profile/codes
  echo -e "${DELETE}Removed ${NAME}$1${TF_N} from code list."
}

codes-clear() {
  confirm_strict "${WARN}Remove all keys from code list?"
  for key in "${!MAP[@]}"; do
    echo -e "${DELETE}Removed ${NAME}$key${TF_N} from code list."
  done
  > ~/.hex_profile/codes
}

### dev
dev-alias() {
  if [ -f ~/.aliasrc ]; then
    continue? "${WARN}${FPATH}~/.aliasrc${TF_N} already exists. Overwrite?"
    if [ $? = 1 ]; then
      cp -a ~/.hex_files/dev/aliasrc ~/.aliasrc
      echo -e "${CREATE}${NAME}.aliasrc${TF_N} written to ${FPATH}home${TF_N}"
    fi
  else
    cp -a ~/.hex_files/dev/aliasrc ~/.aliasrc
    echo -e "${CREATE}${NAME}.aliasrc${TF_N} written to ${FPATH}home${TF_N}"
  fi
  echo -e "${INFO}Installation follow-up instructions:"
  echo -e "${TC_BWHT}1)${TF_N} Open your terminal's .rc file (e.g. ${NAME}.bashrc${TF_N}, ${NAME}.zshrc${TF_N}, etc.)."
  echo -e "${TC_BWHT}2)${TF_N} Add the following line of bash code unless already there:"
  echo -e "   ${CODE} [[ -f \"~/.aliasrc\" ]] && source \"~/.aliasrc\" ${TF_N}"
  echo -e "${TC_BWHT}3)${TF_N} Save .rc file and restart terminal."
  echo -e "   --  Or run the .rc file with ${CODE} . ~/.bashrc ${TF_N}"
}

dev-webpack(){
  if [ ! -f package.json ]; then
    terminate "${INFO} npm package not found. Run ${CODE} npm init ${TF_N} to create an npm package in this directory."
  fi
  confirm_strict "${WARN}${HEX}${CC}dev${CC}webpack${TC_D} will install multiple npm packages. Continue?"
  npm install -D webpack webpack-cli @babel/core @babel/preset-env babel-loader css-loader sass-loader node-sass style-loader extract-loader file-loader extract-text-webpack-plugin
  cp -a ~/.hex_files/dev/webpack-template webpack.config.js
  echo -e "${CREATE}${NAME}webpack.config.js${TF_N} written to ${FPATH}$PWD (here)${TF_N}"
}

main "$@"
