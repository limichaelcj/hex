#!/bin/bash

### interface

confirm() {
  # $1= confirmation message
  if [ -z "$1" ]; then
    local message="Confirm?"
  else
    local message="$1"
  fi
  echo -ne "$message [y/n]: "
  read yn
  if [[ $yn != [Yy] ]]; then
    abort
  fi
  return 1
}

confirm_strict() {
  if [ -z "$1" ]; then
    local message="Confirm?"
  else
    local message="$1"
  fi
  while [[ $yn != [YyNn] ]]; do
    echo -ne "$1 [y/n]: "
    read yn
  done
  if [[ $yn = [Nn] ]]; then
    abort
  fi
  return 1
}

continue?() {
  # $1= confirmation message
  if [ -z "$1" ]; then
    local message="Confirm?"
  else
    local message="$1"
  fi
  echo -ne "$message [y/n]: "
  read yn
  if [[ $yn != [Yy] ]]; then
    return 0
  fi
  return 1
}

### print styles

print_map() {
  # uses global $MAP
  # call read_map before calling this function
  # $1= key color
  # $2= value color
  local KL=0 # Key string Length
  local KC="${1:-${TC_BLU}}" # Key Color
  local VC="${2:-${TC_D}}" # Value Color
  # find longest string lengths for key names
  for key in "${!MAP[@]}"; do
    if [ ${#key} -gt $KL ]; then
      KL=${#key}
    fi
  done
  # print each key value pair as a line
  for key in "${!MAP[@]}"; do
    # get filler space - reference the $KL key length
    local len=${#key}
    fill $((KL-len)) # creates global $FILL
    echo -e "  ${KC}${key}${TF_N}${TC_BGRY}${FILL} :: ${TF_N}${VC}${MAP[$key]}${TF_N}"
  done
}
